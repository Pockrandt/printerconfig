###############

# Qoute:
# > this is where the awkwardness of JINJA (the shit in the {}) being a preprocessor shows up
# > the jinja stuff gets executed first, before any of the actual gcode does...
# so 2 macros are needed
[gcode_macro Shutdown_Printer]
gcode:
    {% if "xyz" in printer.toolhead.homed_axes %}
        _TOOLHEAD_PARK_PAUSE_CANCEL
    {% endif %}
    TURN_OFF_HEATERS
    M84
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=49
    STATUS_OFF
    G4 P5000
    _poweroff_printer

[gcode_macro _poweroff_printer]
gcode:
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}
##################

[gcode_macro HEATSOAK]
gcode:
    {% set DWELL = params.DWELL|default(600000)|int %}             # Heatsoaking duration, default is 10 minutes (600000 milliseconds)
    G4 P{DWELL}
    _beep_preheated

[gcode_macro HOME_UNHOMED]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
      G28
      Z_TILT_ADJUST
      G28

      G91 # relative positioning
      G1 Z10 F3600
      G90 ; Set coordinates to absolute
    {% endif %}



[gcode_macro START_PRINT]
gcode:
    {% set extruderTemp = params.EXTRUDER_TEMP|default(210)|int %}
    {% set bedTemp = params.BED_TEMP|default(55)|int %}

    {% set AREA_START = params.AREA_START|default("0,0") %}
    {% set AREA_END = params.AREA_END|default("0,0") %}

#    {% set material = params.MATERIAL|default('PLA')|string %}
#    {% set nozzle = params.NOZZLE|default(0.4)|string %}

 #   SET_PA MATERIAL={material} NOZZLE={nozzle}

    STATUS_HEATING
    RESPOND PREFIX= MSG="Waiting for bed temp"
    M117  Waiting for bed temp
    M107                                #turn off parts fan
    M104 S{extruderTemp|float*0.7}      # set preheat extruder temp and continue
    M190 S{bedTemp}                     # Wait for bed to come to temperature

    _beep_caution_printer_moving
    G4 P5000                            # 5 seconds

    HOME_UNHOMED

    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1 probe_dock_enable=1
  #  SETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 variable_purge_amount=5

    BED_MESH_CLEAR
    BED_MESH_CALIBRATE

#    RESPOND PREFIX= MSG="Creating a mesh from {params.AREA_START} to {params.AREA_END}"
#    M117 Creating a mesh from {params.AREA_START} to {params.AREA_END}
#    BED_MESH_CALIBRATE PRINT_MIN={params.AREA_START} PRINT_MAX={params.AREA_END}  # Turge08/print_area_bed_mesh.cfg
#    BED_MESH_PROFILE LOAD=default # Klipper change planned for 1st February '23

    STATUS_HEATING
    RESPOND PREFIX= MSG="Waiting for extruder temp..."
    M117  Waiting for extruder temp
    M109 S{extruderTemp}                # Wait for extruder temp 

#    STATUS_CLEANING
#    RESPOND PREFIX= MSG="Moving to prime position"
#    M117 Moving to prime position
#    PRIME_LINE EXTRUDER_TEMP={extruderTemp} XPAD=0 YPAD=0 LENGTH=100 PRINT_SPEED=20 TRAVEL_SPEED=200 PURGE=1 RETRACT=0.75 EXTRUSION_MULTIPLIER=0.96 PRINT_HANDLE=0 HANDLE_FAN=35 AREA_START="75,0"
    
   # VORON_PURGE
    STATUS_PRINTING



# VintageGriffin's automatic prime line macro
[gcode_macro PRIME_LINE]
description: Print an easy to remove parametric extruder priming line with a built-in handle.
gcode:
    # settings
    {% set area = {
      'min_x'          : params.AREA_START.split(",")[0]|float,
	  'min_y'          : params.AREA_START.split(",")[1]|float,
      'safe_x'         : 55, # lowest X coordinates where the prime line can start
      'safe_y'         : 10, # lowest Y coordinates where the prime line can start
      'offset'         : 30, # distance in the Y axis between the prime line and the print skirt
    } %}
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(0)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(8)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(1)|int, # mm of filament to recract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(40)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 0   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}

    # sanity check and computed variables
    {% set max_x, max_y, nozzle_diameter = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float, printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter * 0.75, 'length': [line.length, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding + range(0,5)|random})  %}
    {% if area.min_x < area.safe_x %}
      {% set start_x = area.safe_x|float %}
    {% else %}
      {% set start_x = area.min_x|float %}
    {% endif %}
    {% if (area.min_y - area.offset) < area.safe_y %}
      {% set start_y = area.safe_y|float %}
    {% else %}
      {% set start_y = (area.min_y - area.offset)|float %}
    {% endif %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    M117 Prime Line
    G90 # absolute positioning
    G0 X{start_x} Y{start_y} Z{line.height + 0.5} F{line.travel_speed * 60} # move to starting position
   # M109 S{params.EXTRUDER_TEMP|float*0.98} # Wait until 98% of extruder temp is reached, then continue  
    M104 S{params.EXTRUDER_TEMP} # Set printing extruder temp
    G0 Z{line.height} F{line.travel_speed}
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
      G0 F{line.print_speed * 60} # set print speed
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117 # clear message

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

[gcode_macro END_PRINT]
gcode:
    {% set z = params.Z|default(1)|int %}   ; z hop amount

    M400                             ; wait for buffer to clear
    G91                              ; !relative positioning
    G1 E-0.2 F{30 * 60} 
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
        G1 Z{z} F900                                                                     ; raise Z up by z hop amount
    {% endif %}
    G90                              ; absolute positioning

    _beep_done
    _TOOLHEAD_PARK_PAUSE_CANCEL
    #G1 X{x_safe} Y{max_y} F6000
    
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan

    M400                             ; Finish Moves
    M221 S100                        ; reset flow to 100%
    M220 S100                        ; reset speed to 100%
  #  BED_MESH_CLEAR                  ; clear the bed mesh
    M117 Finished!

    STATUS_READY


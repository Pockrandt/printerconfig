## mostly from https://github.com/Frix-x/klippain/blob/main/macros/helpers/nozzle_cleaning.cfg

[gcode_macro CLEAN_NOZZLE]
description: Wipe the nozzle on the brush
gcode:

[gcode_macro _bucket_wipe]
description: Wipe the nozzle on the brush
gcode:
  {% set brush_clean_accel = printer["gcode_macro _USER_VARIABLES"].brush_clean_accel|default(1500) %}
  {% set speed_move = 350 * 60 %}
  {% set speed_brush = 100 * 60 %}

  {% set Bx, By, Bz = printer["gcode_macro _USER_VARIABLES"].brush_xyz|map('float') %}
  {% set Bx = Bx + brush_offset %}
  {% set brush_offset = printer["gcode_macro _USER_VARIABLES"].brush_center_offset|default(0)|float %}
  {% set brush_size = printer["gcode_macro _USER_VARIABLES"].brush_width_x|default(40)|float %}
  {% set brush_count = printer["gcode_macro _USER_VARIABLES"].brush_count|default(6)|int %}


  _set_status STATE="status_cleaning"

  {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %} { action_raise_error("XY not homed") } {% endif %}
  
  # Set the cleaning acceleration prior to any movement
  {% set saved_accel = printer.toolhead.max_accel %}
  SET_VELOCITY_LIMIT ACCEL={brush_clean_accel}

  G90

  G1 X{Bx} Y{By} F{speed_move} ;   # Move to center of the brush
  G1 Z{Bz} F{speed_move}
  # Wipe procedure
  G91

  {% for wipe in range(brush_count) %}
    G1 Y-5 F{speed_brush}
    G1 Y+5 F{speed_brush}
  {% endfor %}


  # Move to the right side of the brush
  {% if brush_offset < 0 %} # brush center biased towards 0
      G1 X+{ brush_size/2 } F{speed_brush}
  {% else %}                # brush center biased towards x_max
      G1 X+{ (brush_size/2) - brush_offset} F{speed_brush}
  {% endif %}

    # Brush procedure
    {% for wipe in range(brush_count) %}
        G1 X-{ (brush_size) - brush_offset } F{speed_brush}
        G1 X+{ (brush_size) - brush_offset } F{speed_brush}
    {% endfor %}

    G90

    # Reset acceleration values to what it was before
    SET_VELOCITY_LIMIT ACCEL={saved_accel}



  _set_status STATE="status_ready"


[gcode_macro _bucket_purge]
description: Purge a specific amount of filament ontop of the purge bucket
gcode:
  {% set DISTANCE = params.DISTANCE|default(printer["gcode_macro _USER_VARIABLES"].purge_distance)|int %}
  {% set OOZE_TIME = params.OOZE_TIME|default(printer["gcode_macro _USER_VARIABLES"].purge_ooze_time)|int %}
  {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
  {% set Z_DROP = params.Z_DROP|default(1)|int %}

  {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
  {% set purgeclean_servo_enabled = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_enabled %}
  {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
  {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
  {% set re_enable_filament_sensor = 0 %}
  {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}


  {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
  {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
  
  {% if status_leds_enabled %}
      STATUS_LEDS COLOR="CLEANING"
  {% endif %}
  
  {% if verbose %}
      RESPOND MSG="Purge filament..."
  {% endif %}

  {% if filament_sensor_enabled %}
      {% if (printer['filament_motion_sensor runout_sensor'] is defined and printer['filament_motion_sensor runout_sensor'].enabled) or (printer['filament_switch_sensor runout_sensor'] is defined and printer['filament_switch_sensor runout_sensor'].enabled) %}
          SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
          {% set re_enable_filament_sensor = 1 %}
      {% endif %}
  {% endif %}

  G90

  _CONDITIONAL_MOVE_TO_PURGE_BUCKET Z_DROP={Z_DROP}

  # Heat if needed and purge
  _LOW_TEMP_CHECK T={TEMP}
  G92 E0
  G1 E{DISTANCE|float} F150

  # Retract
  G92 E0
  G1 E-1.7 F2100
  G1 E-18.3 F150
  G92 E0

  # Wait some time to let the nozzle ooze before cleaning
  # No M400 needed here since G4 is also flushing Klipper's buffer
  G4 P{OOZE_TIME * 1000}

  {% if filament_sensor_enabled and re_enable_filament_sensor %}
      SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
  {% endif %}

  {% if purgeclean_servo_enabled %}
      _SERVO_RETRACT ITEM="purge"
  {% endif %}


  _set_status STATE="status_ready"

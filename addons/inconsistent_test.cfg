# https://github.com/fbeauKmi/V2.3934/blob/dev/klipper_config/macros/calibration/inconsistent_test.cfg
# Date of Copy: 2023-12-18

# Usage:
# START_PRINT BED_TEMP=110 EXTRUDER_TEMP=250 NOMESH=1
# PRINT_INCONSISTENT_TEST [<SETTING=VALUE>]

## Print a spiralize trapezoid
# author: fboc
# version 1.0beta
#   changelog
#    V0.0alpha : initial release
#    v1.0beta  : add Delta printers, change pattern (round ends to limit accel effects(IS, PA))
# based on https://mihaidesigns.com/pages/inconsistent-extrusion-test study
# The aim is to test printer issue and avoid slicer issues
# in order to get advice on potentialy failed parts rotation distance and gear ratio should be properly set

[gcode_macro PRINT_INCONSISTENT_TEST]
description: Print a pattern in vase mode to identify extrusion inconsistency
variable_datas: {"LH":0.2, "LW": 0.6, "filament_dia" : 1.75} 
gcode:
    {% set width = params.WIDTH|default(15)|float %}                   # Width of the pattern                                 
    {% set length = params.LENGTH|default(60)|float - width %}         # base length of the pattern
    {% set height = params.HEIGHT|default(45)|float %}                 # Height
    {% set print_speed = params.SPEED|default(80)|float * 60 %}        # Print_speed in mm/s
    {% set print_speed2 = params.SPEED_2|default(50)|float * 40 %}     # Print_speed in mm/s when h > height/2
    
    {% set fan_speed = params.FAN_SPEED|default(100)|int * 2.55 %}     # Fan speed % 
    {% set z_step = params.LAYER_HEIGHT|default(0.2)|float %}          # Layer height
    {% set line_width = params.LINE_WIDTH|default(0.6)|float %}        # Layer width (should be max 175% of nozzle diameter according Slic3r)
    {% set filament_dia = params.FILAMENT_DIA|default(1.75)|float %}   # Filament dia (for e_speed)
    {% set x_start , y_start = (params.COORDS|default("-10000,-10000")).split(',')| map('trim')|map('float') %} #coords of piece center
    
    # Constants & Computed datas
    {% set circle_coords = [0.01231165940, 0.03663182429, 0.06004999210, 0.08198952981, 0.10191021318,
                            0.11932152889, 0.13379475255, 0.14497350536, 0.15258252933, 0.15643446504] %}
    {% set raft_inc = 1.4142*line_width %}
    {% set raft_h = 0.3 %}
    {% set raft_e = 0.06 %}
    {% set raft_margin = 2 %}
    {% set tower_e = line_width*z_step/(3.14159 * (filament_dia/2)**2 ) %}
    {% set r_width= width + (2*raft_margin) %}
    {% set step_by_mm = (z_step / 2 ) / (width + length) %}

    {% set perim = 1.57079633 * width %}

    {% set rotation_distance = printer.configfile.settings.extruder.rotation_distance %}
    {% set gear_ratio = printer.configfile.settings.extruder.gear_ratio %}

    {% set min_x = printer.toolhead.axis_minimum.x|float %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set min_y = printer.toolhead.axis_minimum.y|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set x_start = (x_start if x_start != -10000 else (max_x - min_x) / 2) - length / 2 %}
    {% set y_start = (y_start if y_start != -10000 else (max_y - min_y) / 2) - width / 2 %}

    {% if printer.extruder.can_extrude %}

    {% set _= datas.update({"LW" : line_width, "LH" : z_step, "filament_dia" : filament_dia}) %}  # Store values required to compute output datas 

    #
    # STARTING...
    #
    {action_respond_info("")}
    {action_respond_info("Starting Inconsistency test print")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
    {action_respond_info("")}
    {action_respond_info("To analyse result refer to https://mihaidesigns.com/pages/inconsistent-extrusion-test")}
    {action_respond_info("")}
    {action_respond_info("Once print done, measure wavelength according https://github.com/weaslus/Inconsistent_Extrusion_Diagnostics" )}
    _extruder_datas

        M221 S100 #set extrude_factor to 1
         
        G90
    # Go to start point
        G1 X{x_start} Y{y_start} F{printer['gcode_macro _User_Variables'].travel_speed * 60}
        G1 Z{raft_h} F{printer['gcode_macro _User_Variables'].z_drop_speed * 60}
        G91
    # Print raft
        G1 F2400
        #G1 X-{raft_margin} Y-{raft_margin}
        G1 X-{raft_margin + width/2} Y-{raft_margin}
        {% for i in range(0,(r_width/(raft_inc))|int,2) %}
            G1 X{raft_inc} E{raft_inc * raft_e}
            G1 X-{(i+1) * raft_inc} Y{(i+1) * raft_inc} E{ raft_e * 1.41 * (i+1) * raft_inc}
            G1 Y{raft_inc} E{raft_inc * raft_e}
            G1 X{(i+2) * raft_inc} Y-{(i+2) * raft_inc} E{ raft_e * 1.41 * (i+2) * raft_inc}
        {% endfor %}
        #{% for i in range(1,((length-width)/(raft_inc))|int,2) %}
        {% for i in range(1,(length/raft_inc)|int,2) %}
            G1 X{raft_inc} E{raft_inc * raft_e}
            G1 X-{r_width} Y{r_width} E{raft_e * 1.41  * r_width}
            G1 X{raft_inc} E{raft_inc * raft_e}
            G1 X{r_width} Y-{r_width} E{raft_e * 1.41  * r_width}
        {% endfor %}
        {% for i in range(0,(r_width/(raft_inc))|int-1,2) %}
            G1 Y{raft_inc} E{raft_inc * raft_e}
            G1 X-{r_width - (i+1) * raft_inc} Y{r_width - (i+1) * raft_inc} E{raft_e * 1.41  * (r_width - (i+1) * raft_inc)}
            G1 X{raft_inc} E{raft_inc * raft_e}
            G1 X{r_width - (i+2) * raft_inc} Y-{r_width - (i+2) * raft_inc} E{raft_e * 1.41  * (r_width - (i+2) * raft_inc)}
        {% endfor %}
        G10
        G1 Z0.2

        G90
        G1 X{x_start} Y{y_start} F{printer['gcode_macro _User_Variables'].travel_speed * 60}
        M106 S{fan_speed}
        G91
        
    # Base layer (0.1 to LH +0.1mm) spriralized (increase extrusion  f(height))
        G1 Z-0.1 F{print_speed}
        {% for l in range(1,length|int+1) %}
            G1 X1 Z{step_by_mm} E{tower_e*((l - 1)*step_by_mm + 0.1)/z_step }
        {% endfor %}

        {% for l in range(10) %}
            G1 X{circle_coords[9-l]*width/2} Y{circle_coords[l]*width/2} Z{perim/20 * step_by_mm} E{tower_e*((l*perim/20 + length)*step_by_mm + 0.1)/z_step}
        {% endfor %}
        {% for l in range(10) %}
            G1 X-{circle_coords[l]*width/2} Y{circle_coords[9-l]*width/2} Z{perim/20 * step_by_mm} E{tower_e*((l*perim/20 + length)*step_by_mm + 0.1)/z_step}
        {% endfor %}
        
        {% for l in range(1,length|int+1) %}
            G1 X-1 Z{step_by_mm} E{tower_e*((l + length + width - 1)*step_by_mm + 0.1)/z_step }
        {% endfor %}

        {% for l in range(10) %}
            G1 X-{circle_coords[9-l]*width/2} Y-{circle_coords[l]*width/2} Z{perim/20 * step_by_mm} E{tower_e*((l*perim/20 + perim + 2*length)*step_by_mm + 0.1)/z_step}
        {% endfor %}
        {% for l in range(10) %}
            G1 X{circle_coords[l]*width/2} Y-{circle_coords[9-l]*width/2} Z{perim/20 * step_by_mm} E{tower_e*((l*perim/20 + perim + 2*length)*step_by_mm + 0.1)/z_step}
        {% endfor %}
        

    #  Tower spiralized   
        {% for h in range((height/z_step)|int) %}
            # Change print_speed at half the height
            {% if h == (height/2/z_step)|int %}
                G1 F{print_speed2}
            {% endif %}

            {% set length = length - (z_step/2.5)*h %}  # Reduce tower length
            {% set step_by_mm = (z_step/2) / (perim + length) %}
            G1 X{length} Z{step_by_mm*length} E{length*tower_e}
            G90
            G3 J{width/2} Y{y_start + width} Z{ raft_h + 0.1 + (h+1.5)*z_step} E{perim*tower_e}
            G91
            G1 X-{length} Z{step_by_mm*length} E{length*tower_e} 
            G90
            G3 J-{width/2} Y{y_start} Z{ raft_h + 0.1 + (h+2)*z_step } E{perim*tower_e}
            G91

        {% endfor %}
        G1 X20 Y20 F18000
        G1 Z2


    {% endif %}
    
[gcode_macro _extruder_datas]
variable_gear: {"BMG" : {"large" : 50, "hobbed" : 44}, "LGX" : {"large":44, "hobbed" :76 }} 
gcode:
    {% set _datas = printer["gcode_macro PRINT_INCONSISTENT_TEST"].datas %}
    {% set Wl = (3.141592653*(_datas.filament_dia/2)**2/_datas.LH/_datas.LW) %}
    {% set rotation_distance = printer.configfile.settings.extruder.rotation_distance %}
    {% set gear_ratio = printer.configfile.settings.extruder.gear_ratio %}
    {% if gear_ratio[0] %}
        {% if gear_ratio[1] and  gear_ratio[0][0] == gear.LGX.large %}
            {% set extruder_type = "LGX" %}
        {% elif gear_ratio[0][0] == gear.BMG.large %}
            {% set extruder_type = "BMG" %}
        {% else %}
            {action_raise_error("Unknown extruder type, or gear ratio not properly set")}
        {%endif%}
    {% else %}
        {action_raise_error("gear ratio not set unable to determine current extruder")}
    {% endif %}

    {action_respond_info("Rotation_distance:  %s, Gear_ratio: %s" % (rotation_distance,gear_ratio))}
    {action_respond_info("Filament diameter: %s, Line width: %s, Layer height: %s" % (_datas.filament_dia,_datas.LW,_datas.LH)) }
    {% if extruder_type == "LGX" %}
        {action_respond_info("Detected extruder:  LGX or LGX lite, if not results could mismatch")}
        {action_respond_info("%.2f mm : each hobbed tooth of the drive gear. this will be related to idler tension. Too much or too little is currently unknown, both are plausable." %  (Wl*rotation_distance/gear.LGX.hobbed))}
        {action_respond_info("%.2f mm : drive teeth of main gear, moving up 1 tension position may effect this" %  (Wl*rotation_distance/gear_ratio[1][0]|int))}
        {action_respond_info("%.2f mm : teeth that mesh with motor gear - unfortunately cannot be adjusted" %  (Wl*rotation_distance*gear_ratio[1][1]/gear_ratio[0][0]/gear_ratio[1][0]|int))}
        {action_respond_info("%.2f mm : motor gear excentricity - replace motor?" %  (Wl*rotation_distance*gear_ratio[0][1]*gear_ratio[1][1]/gear_ratio[0][0]/gear_ratio[1][0]|int))}
    {% elif extruder_type == "BMG" %}
        {action_respond_info("Detected extruder: BMG type (CW1, CW2, sherpa mini, ...), if not results could mismatch")}
        {action_respond_info("%.2f mm : each hobbed tooth of the drive gear. this will be related to idler tension. Too much or too little is currently unknown, both are plausable." %  (Wl*rotation_distance/gear.BMG.hobbed))}
        {action_respond_info("%.2f mm : each tooth of the large gear, check motor backlash." %  (Wl*rotation_distance/gear_ratio[0][0]))}
        {action_respond_info("%.2f mm : 1 complete rotation of the motor gear, check motor outside of gearbox to see If the gear is offcentre." %  (Wl*rotation_distance*gear_ratio[0][1]/gear_ratio[0][0]))}
        {action_respond_info("%.2f mm : your rotation distance. This is a concentricity issue with the gears on the shaft of the main BMG gear. Either the large or small gear. They are not spinning centrally and will likely need replacing" %  (Wl*rotation_distance))}
    {% endif %}
    {action_respond_info("if the wavelength changes between the bottom and top of the test, it's more likely a stepper resonance problem")}

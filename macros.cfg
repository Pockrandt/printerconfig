
[gcode_macro SET_VELOCITY_LIMIT]
rename_existing: _SET_VELOCITY_LIMIT
description: Alter the velocity limits unl√∂ess printer is in nightmode
variable_nightmode: 0 
gcode: 
  {% if nightmode != 1 or params.NIGHTMODE is defined %} _SET_VELOCITY_LIMIT {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %} {% endif %}
  {% if params.NIGHTMODE is defined %} SET_GCODE_VARIABLE MACRO=SET_VELOCITY_LIMIT VARIABLE=nightmode VALUE={params.NIGHTMODE|int} {% endif %}


[gcode_macro PRINT_START]
variable_tram_command: ""
gcode:
  {% set printsettings = printer['gcode_macro _PRINTER_SETTINGS']|default({}) %}
  {% set park_macro    = printsettings.park_macro|default("none") %}
  {% set purge_macro   = params.PURGE|default(printsettings.purge_macro|default("none")) %}

  {% set BED = params.BED|default(60)|float %}
  {% set HOTEND = params.HOTEND|default(205)|float %}
  {% set MESH = params.MESH|default(99)|int %}

  CLEAR_PAUSE
  BED_MESH_CLEAR

  SET_FAN_SPEED FAN=mcu SPEED=0.5
  M107
  M104 S150
  M140 S{BED}
  
  {% if printer['gcode_macro _beep_caution_printer_moving'] is defined %} _beep_caution_printer_moving {% endif %}
  G4 P3000

  {% if printer['gcode_macro status_homing'] is defined %} status_homing {% endif %}
  {% if 'x' not in printer.toolhead.homed_axes or 
        'y' not in printer.toolhead.homed_axes %}
    G28 X Y
  {% endif %}
  G28 Z

  {% if printer.heater_bed.temperature < BED * 0.90 %} 
    {% if printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'] is defined %} _TOOLHEAD_PARK_PAUSE_CANCEL {% endif %}{% endif %}

  {% if printer['gcode_macro STATUS_HEATING'] is defined %} STATUS_HEATING {% endif %}
  M190 S{BED}
  
  {% if printer.configfile.settings.z_tilt is defined %}            {% set tram_command = 'Z_TILT_ADJUST' %}     {% endif %}
  {% if printer.configfile.settings.quad_gantry_level is defined %} {% set tram_command = 'QUAD_GANTRY_LEVEL' %} {% endif %}
  {% if tram_command != "" %} 
    {% if printer['gcode_macro status_leveling'] is defined %}
      status_leveling {% endif %}
    {% if printer.configfile.settings.scanner is defined %}
      {tram_command} HORIZONTAL_MOVE_Z=20
      #{tram_command} HORIZONTAL_MOVE_Z=20 RETRY_TOLERANCE=0.5
      #{tram_command} HORIZONTAL_MOVE_Z=3 
    {% else %} 
      {tram_command}
    {% endif %}
  {% endif %}
  G28 Z

  {% if MESH == 0 %}   {% elif MESH == 1 %} BED_MESH_CALIBRATE {% else %} BED_MESH_CALIBRATE ADAPTIVE=1 {% endif %}

  M109 S150
  {% if printer['gcode_macro status_calibrating_z'] is defined %}  status_calibrating_z {% endif %}
  {% if printer.configfile.settings.scanner is defined %}
    CARTOGRAPHER_TOUCH SAMPLES=4 RETRIES=10
  {% else %}
    G28 Z
  {% endif %}

  {% if park_macro != 'none' %}                              {park_macro}         {% endif %}    
  {% if printer['gcode_macro STATUS_HEATING'] is defined %}  STATUS_HEATING       {% endif %}
  M109 S{HOTEND}
  {% if purge_macro != 'none' %}                             {purge_macro}        {% endif %}    
  G92 E0
  {% if printer['gcode_macro STATUS_PRINTING'] is defined %} STATUS_PRINTING      {% endif %}
  MESSAGE MSG="Printer goes brr"

[gcode_macro START_PRINT]
gcode:
  PRINT_START { rawparams }

[gcode_macro PRINT_END]
gcode:
  _TOOLHEAD_PARK_PAUSE_CANCEL
  G1 E-5.2 F1800                  ; retract filament
  _beep_done
  
  M400                             ; Finish Moves
  M221 S100                        ; reset flow to 100%
  M220 S100                        ; reset speed to 100%
  
  M104 S0                          ; turn off hotend
  M140 S0                          ; turn off bed
  M106 S0                          ; turn off fan
  SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1

  RESPOND PREFIX= MSG=""
  M117 
  STATUS_READY
  SET_FAN_SPEED FAN=mcu SPEED=0


[gcode_macro SAVE_CONFIG]
rename_existing: _SAVE_CONFIG
gcode:
  BED_MESH_PROFILE REMOVE=default
  _SAVE_CONFIG

[delayed_gcode backup_config_on_boot]
initial_duration: 5
gcode:
  _clean_gcode
  CONFIG_PULL
  CONFIG_COMMIT

[gcode_macro END_PRINT]
gcode:
  PRINT_END { rawparams }

[gcode_macro _PURGE]
gcode: 
  {% set purge_temp_min = printer["gcode_macro _PRINTER_SETTINGS"].purge_temp_min|default(260)%}
  {% set purge_len = printer["gcode_macro _PRINTER_SETTINGS"].purge_len|default(20)%}
  {% set purge_spd = printer["gcode_macro _PRINTER_SETTINGS"].purge_spd|default(100)%}
  {% set purge_ret = printer["gcode_macro _PRINTER_SETTINGS"].purge_ret|default(12)%}
  {% set ooze_dwell = printer["gcode_macro _PRINTER_SETTINGS"].ooze_dwell|default(3)%}
  
  ## Move to bucket 
  G1 X{start_x} Y{start_y} F6000 
  G1 Z{start_z} F1500 
  
  {% if printer.extruder.temperature >= purge_temp_min %}
    M83      ; relative mode
    G1 E{purge_len} F{purge_spd}
    G1 E-{purge_ret} F{purge_spd * 5}
    G4 P{ooze_dwell * 1000}
    G92 E0   ; reset extruder
  {% else %}
    MESSAGE MSG="Extruder not hot enough"
  {% endif %}


[gcode_macro CLEAN_NOZZLE]
gcode: 
  {% if "xyz" not in printer.toolhead.homed_axes %}
     G28 
  {% endif %}
  
  {% set start_x = printer["gcode_macro _PRINTER_SETTINGS"].brush_start_x|default(55)%}
  {% set start_y = printer["gcode_macro _PRINTER_SETTINGS"].brush_start_y|default(10)%}
  {% set start_z = printer["gcode_macro _PRINTER_SETTINGS"].brush_start_z|default(20)%}
  {% set wipe_dist = printer["gcode_macro _PRINTER_SETTINGS"].brush_wipe_dist|default(-50)%}
  {% set wipe_qty = printer["gcode_macro _PRINTER_SETTINGS"].brush_wipe_qty|default(5)%}
  {% set wipe_spd = printer["gcode_macro _PRINTER_SETTINGS"].brush_wipe_spd|default(100)%}
  
  {% set initial_z = printer.toolhead.position.z %}
  
  G90
  ## Move to start position 
  G1 X{start_x} Y{start_y} F6000 
  G1 Z{start_z} F1500 
  ## Wipe nozzle 
  {% for wipes in range(1, (wipe_qty + 1)) %}
     G1 X{start_x + wipe_dist} F{wipe_spd * 60}
     G1 X{start_x} F{wipe_spd * 60} {% endfor %} 
  ## Raise nozzle 
  G91
  G1 Z{initial_z} F1500 



[gcode_macro PARK_REAR]
gcode:
  G90
  {% set th = printer.toolhead %}
  G0 X{th.axis_maximum.x/2} Y{th.axis_maximum.y - 5} F6000 

[gcode_macro PARK_FRONT]
gcode:
  G90
  {% set th = printer.toolhead %}
  G0 X{th.axis_maximum.x/2} Y{th.axis_minimum.y + 5} F6000 

[gcode_macro RELAX_BELTS]
gcode:
  G90
  {% set th = printer.toolhead %}
  {% set margin = 10 %}
  G0 Z50
  G0 X{th.axis_maximum.x - margin} Y{th.axis_maximum.y - margin} F6000 
  G0 X{th.axis_minimum.x + margin} Y{th.axis_minimum.y + margin} F6000 
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
  G0 X{th.axis_minimum.x + margin} F6000
  G0 X{th.axis_maximum.x - margin} F6000
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
  G0 Y{th.axis_minimum.y + margin} F6000
  G0 Y{th.axis_maximum.y - margin} F6000
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000

# Qoute:
# > this is where the awkwardness of JINJA (the shit in the {}) being a preprocessor shows up
# > the jinja stuff gets executed first, before any of the actual gcode does...
# so 2 macros are needed
[gcode_macro SHUTDOWN_PRINTER]
gcode:
  {% if "xyz" in printer.toolhead.homed_axes %} _TOOLHEAD_PARK_PAUSE_CANCEL {% endif %}
  TURN_OFF_HEATERS
  
  {% if printer['gcode_macro status_off'] is defined %}      status_off                                                {% endif %}
  {% if printer['gcode_macro _CASELIGHT_OFF'] is defined %}  _CASELIGHT_OFF                                            {% endif %}
  {% if printer['neopixel skirt'] is defined %}             SET_LED LED="skirt" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1 {% endif %}

  M84


#[gcode_macro _PRINTER_POWEROFF]
#gcode:
#  {action_call_remote_method("set_device_power", device="printer",state="off")}
  
##################
# Todo: interrutable HEATsoak with delay gcode
[gcode_macro HEATSOAK] 
gcode:
  STATUS_HEATING
               # default is 10 minutes (600000 milliseconds)
  {% set DWELL = params.DWELL|default(600000)|int %}
  G4 P{DWELL}
  _beep_preheated


## safety firster
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling if the printer is leveled, if not level the printer
gcode:
    {% if printer.configfile.settings.z_tilt is defined and not printer.z_tilt.applied %} 
        Z_TILT_ADJUST
    {% elif printer.configfile.settings.quad_gantry_level is defined and not printer.quad_gantry_level.applied %} 
        QUAD_GANTRY_LEVEL 
    {% endif %}
    G28 Z
    _BED_MESH_CALIBRATE {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}



# source: https://github.com/Frix-x/klippain/blob/main/macros/helpers/bed_heater_ctrl.cfg
#         https://github.com/Frix-x/klippain/blob/main/macros/helpers/hotend_heater_ctrl.cfg
# date copy : 2023-11-21



[gcode_macro M109]
rename_existing: M109.1
gcode:
  {% set S = params.S|float %}
  {% set actual_temp = printer.extruder.temperature|float %}

  M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
  {% if S != 0 %}
      {% if actual_temp <= S %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={S}
      {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={S}
      {% endif %}   
  {% endif %}


[gcode_macro M190]
rename_existing: M190.1
gcode:
  {% set S = params.S|float %}
  {% set actual_temp = printer.heater_bed.temperature|float %}

  M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
  {% if S != 0 %}
      {% if actual_temp <= S %}
          TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S}
      {% else %}
          TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={S}
      {% endif %}   
  {% endif %}


####
# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
  {% set pa = params.K|float %}
  SET_PRESSURE_ADVANCE ADVANCE={pa}


[gcode_macro M600]
gcode:
  _beep_filament_change
  PAUSE X=10 Y=10 Z_MIN=50

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = 50 * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = 50  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state


# requires module:  wget -P ~/klipper/klippy/extras/ https://raw.githubusercontent.com/dw-0/kiauh/master/resources/gcode_shell_command.py
[gcode_shell_command git_pull_config]
command: /usr/bin/bash /home/pi/PrinterBackupScript/pullconfig.sh
timeout: 30.0
verbose: False

[gcode_macro CONFIG_PULL]
description: Pull config from GitHub
gcode:
  RUN_SHELL_COMMAND CMD=git_pull_config

[gcode_shell_command git_commit_config]
command: /usr/bin/bash /home/pi/PrinterBackupScript/autocommit.sh
timeout: 30.0
verbose: True

[gcode_macro CONFIG_COMMIT]
description: Backs up config to GitHub
gcode:
  RUN_SHELL_COMMAND CMD=git_commit_config

[gcode_shell_command clean_gcode]
command: find /home/pi/printer_data/gcodes/ -type f -mtime +20 -delete
timeout: 30.0
verbose: False

[gcode_macro _clean_gcode]
description: Removes old gcode files
gcode:
  RUN_SHELL_COMMAND CMD=clean_gcode


[gcode_macro SEARCH_VARS]
gcode:
  {% set search = params.S|lower %}
  {% set ns = namespace() %}
  {% for item in printer  %}
      {% if ' ' in item %}
          {% set ns.path = ['printer', "['%s']" % (item), ''] %}
      {% else %}
          {% set ns.path = ['printer.', item, ''] %}   
      {% endif %} 

      {% if search in ns.path|lower %}
          { action_respond_info(ns.path|join) }
      {% endif %} 

      {% if printer[item].items() %}
          {% for childkey, child in printer[item].items() recursive %}
              {% set ns.path = ns.path[:loop.depth|int + 1] %}

              {% if ' ' in childkey %}
                  {% set null = ns.path.append("['%s']" % (childkey)) %}
              {% else %}
                  {% set null = ns.path.append(".%s" % (childkey)) %}
              {% endif %} 

              {% if child is mapping  %}
                  { loop(child.items()) }
              {% else %}
                  {% if search in ns.path|lower %}
                      { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                  {% endif %} 
              {% endif %} 
              
          {% endfor %}
      {% endif %} 
  {% endfor %}


# https://github.com/Klipper3d/klipper/issues/4816

[gcode_macro MESSAGE]
description: Output message on console and display (MSG="required-message")
variable_msg_stack: [""]
gcode:
    {% if params.MSG is not defined %}
        { action_respond_info("MESSAGE macro called without MSG parameter; ignored") }
    {% else %}
        # add message to top entry on stack
        {% set msg = params.MSG|default("") %}
        {% set _ = msg_stack.pop() %}
        {% set msg_stack = msg_stack + [msg] %}
        SET_GCODE_VARIABLE macro=MESSAGE variable=msg_stack value="{msg_stack}"
        
        # output message to display and console
        MESSAGE_UPDATE
    {% endif %}

[gcode_macro MESSAGE_PUSH]
description: Push the message stack, and optionally display a message (MSG="optional-message")
gcode:
    {% set msg = params.MSG|default("") %}

    # push the stack down one level
    {% set msg_stack = printer["gcode_macro MESSAGE"].msg_stack %}
    {% set msg_stack = msg_stack + [""] %}
    SET_GCODE_VARIABLE macro=MESSAGE variable=msg_stack value="{msg_stack}"

    # output message if we have one
    {% if params.MSG is defined %}
        MESSAGE msg="{msg}"
    {% endif %}
    

[gcode_macro MESSAGE_POP]
description: Pop the message stack, restoring the prior message
gcode:
    {% set msg_stack = printer["gcode_macro MESSAGE"].msg_stack %}
    {% if msg_stack|length > 1 %}
        # pop the message off the stack
        {% set _ = msg_stack.pop() %}
        SET_GCODE_VARIABLE macro=MESSAGE variable=msg_stack value="{msg_stack}"

        # update the displays
        MESSAGE_UPDATE
    {% else %}
        { action_respond_info("MESSAGE_POP called with no remaining MESSAGE_PUSH items; ignored") }
    {% endif %}

[gcode_macro MESSAGE_RESET]
description: Resets the message stack (recommended in PRINT_START to repair unmatched MESSAGE_PUSH/MESSAGE_POP)
gcode:
    SET_GCODE_VARIABLE macro=MESSAGE variable=msg_stack value="['']"

[gcode_macro MESSAGE_UPDATE]
description: Internal macro used to display the current message from the stack (MSG="required-message")
gcode:
    # get message from the stack, eliminating any blank messages
    {% set msg_stack = printer["gcode_macro MESSAGE"].msg_stack|reject("eq", "")|list %}
    {% if msg_stack|length > 0 %}
        {% set msg = msg_stack[msg_stack|length - 1] %}
    {% else %}
        {% set msg = "" %}
    {% endif %}

    # display, including prior messages if we have any
    {% if msg_stack|length > 1 %}
        {% set _ = msg_stack.pop() %}
        {% set prior_msgs = msg_stack|reverse|join(", ") %}
        M117 {msg} ({prior_msgs})
        RESPOND MSG="{msg} ({prior_msgs})"
    {% else %}
        M117 {msg}
        {% if msg != "" %}
            RESPOND MSG="{msg}"
        {% endif %}
    {% endif %}




[gcode_macro CARTO_DATA_SAMPLE]
gcode:
  {% set bed_temp = params.BED_TEMP|default(110)|int %}
  {% set nozzle_temp = params.NOZZLE_TEMP|default(260)|int %}
  {% set min_temp = params.MIN_TEMP|default(40)|int %}
  {% set max_temp = params.MAX_TEMP|default(70)|int %}
  G90
  M106 S255
  MESSAGE MSG="Waiting for Coil to cool to {min_temp}"
  TEMPERATURE_WAIT SENSOR='temperature_sensor scanner_coil' MAXIMUM={min_temp}
  
  MESSAGE MSG="Starting Phase 1 of 3"
  M106 S0
  G28
  G0 Z1
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  TEMPERATURE_WAIT SENSOR='temperature_sensor scanner_coil' MINIMUM={min_temp}
  scanner_STREAM FILENAME=data1
  MESSAGE MSG="Waiting for Coil to heat to {max_temp}"
  TEMPERATURE_WAIT SENSOR='temperature_sensor scanner_coil' MINIMUM={max_temp}
  scanner_STREAM FILENAME=data1
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  MESSAGE MSG="Waiting for Coil to cool to {min_temp}"
  TEMPERATURE_WAIT SENSOR='temperature_sensor scanner_coil' MAXIMUM={min_temp}
  
  MESSAGE MSG="Starting Phase 2 of 3"
  M106 S0
  G28 Z0
  G0 Z2
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  scanner_STREAM FILENAME=data2
  MESSAGE MSG="Waiting for Coil to heat to {max_temp}"
  TEMPERATURE_WAIT SENSOR='temperature_sensor scanner_coil' MINIMUM={max_temp}
  scanner_STREAM FILENAME=data2
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  MESSAGE MSG="Waiting for Coil to cool to {min_temp}"
  TEMPERATURE_WAIT SENSOR='temperature_sensor scanner_coil' MAXIMUM={min_temp}
  
  MESSAGE MSG="Starting Phase 3 of 3"
  M106 S0
  G28 Z0
  G0 Z3
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  scanner_STREAM FILENAME=data3
  MESSAGE MSG="Waiting for Coil to heat to {max_temp}"
  TEMPERATURE_WAIT SENSOR='temperature_sensor scanner_coil' MINIMUM={max_temp}
  scanner_STREAM FILENAME=data3
  M104 S0
  M140 S0
  MESSAGE MSG="done, see wiki"
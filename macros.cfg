[gcode_macro testy]
gcode:

  #RESPOND TYPE=echo MSG='{"park macro is  %s" % (macro_park)}'
  #SET_GCODE_VARIABLE MACRO=_PRINTER_SETTINGS VARIABLE=macro_park VALUE=something
  

## save things
#   {% if printer['gcode_macro _NAME'] is defined %}
#    {% endif %}

# int
# {action_respond_info("setnightmode: %d " % (setnightmode))}




### Broken, Todo
[gcode_macro CALIBRATE_BACKLASH]
description: Calibrate backlash at each bed level point
gcode:
  {% if printer['gcode_macro status_homing'] is defined %} status_homing      {% endif %}
  {% if 'x' not in printer.toolhead.homed_axes or 
        'y' not in printer.toolhead.homed_axes                                         %}  
    G28 X Y                                                                   {% endif %}
  G28 Z
  {% if printer['gcode_macro status_homing'] is defined %} status_leveling    {% endif %}
  {% if printer.configfile.settings.z_tilt is defined                                  %}
    {% set level = "z_tilt"                                                            %}
    {% if not printer.z_tilt.applied %} Z_TILT_ADJUST                         {% endif %}
  {% elif printer.configfile.settings.quad_gantry_level is defined                     %} 
    {% set level = "quad_gantry_level"                                                 %}
    {% if  not printer.quad_gantry_level.applied %} QUAD_GANTRY_LEVEL         {% endif %}
  {% else                                                                              %}
    { action_raise_error("This printer has no ztilt / QGL ")                            }
  {% endif                                                                             %}  
  {% set z_height     = printer.configfile.config[level]['horizontal_move_z']          %}
  {% set homing_speed = printer.configfile.config[level]['speed']  * 60                %}
  {% set probe_points = printer.configfile.config[level]['points']                     %}

 # {% for probe_point in probe_points %}{  
 #   G1 X{probe_point Y{params[probe_point]} Z{z_height} F{homing_speed}
 #   CARTOGRAPHER_ESTIMATE_BACKLASH
# }

  {% set center_loc = printer.configfile.settings.bed_mesh.zero_reference_position %}         
  G1 X{center_loc[0]} Y{center_loc[1]} Z{z_height} F{homing_speed}


[gcode_macro SET_VELOCITY_LIMIT]
rename_existing: _SET_VELOCITY_LIMIT
description: Alter the velocity limits unless printer is in nightmode
variable_nightmode: 0 
gcode: 
  {% if nightmode != 1 or params.NIGHTMODE is defined %} _SET_VELOCITY_LIMIT {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %} {% endif %}
  {% if params.NIGHTMODE is defined %} SET_GCODE_VARIABLE MACRO=SET_VELOCITY_LIMIT VARIABLE=nightmode VALUE={params.NIGHTMODE|int} {% endif %}


[gcode_macro PRINT_START]
gcode:
  {% set printsettings = printer['gcode_macro _PRINTER_SETTINGS']|default({}) %}
  {% set macro_park = printsettings.macro_park if printsettings.macro_park is defined
                      else params.PARKMACRO |default("PARK_REAR")  %}
  {% set macro_purge = params.PURGE     |default(printsettings.macro_purge|default("none")) %}
  {% set temp_bed    = params.BED       |default(  0)|float %}
  {% set temp_he     = params.HOTEND    |default(205)|float %}
  {% set temp_probe  = params.PROBETEMP |default(140)|int %}
  {% set do_mesh     = params.MESH      |default(99)|int %}

  _set_status STATE=status_busy
  CLEAR_PAUSE
  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0             ; clear any Z offset
  M107                             ; turn off PCF
  SET_FAN_SPEED FAN=mcu SPEED=0.5  ; enable electronics bay fan
  M140 S{temp_bed}                 ; set bed temp
  M104 S{temp_probe}               ; set nozzle probe temp

  _set_status STATE=_beep_caution_printer_moving
  G4 P3000
  
  _set_status STATE=status_homing
  {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %} G28 X Y {% endif %}
  G28 Z

  {% if temp_bed != 0 %} 
    _set_status STATE=status_heating
    {% if printer.configfile.settings.scanner   is defined %}   ; preheat scanner coil
      {% if printer.heater_bed.temperature < temp_bed * 0.90 %} ; its not a immediate reprint 
        {% set th = printer.toolhead %}
        G90
        G0 Z20
        G0 X{th.axis_maximum.x / 2} Y{th.axis_minimum.y + 10} F6000
        {% if temp_bed > 80 %} {% set probe_retract = 10 %} {% else %} {% set probe_retract = 2 %} {% endif %}
        PROBE_ACCURACY SAMPLES=1 SAMPLE_RETRACT_DIST={probe_retract}
        G0 Z{probe_retract}
      {% endif %}
    {% endif %}
    M190 S{temp_bed}
  {% endif %}

  # wipe, no purge {macro_wipe} purge=0
  {% if printer.configfile.settings.z_tilt            is defined
     or printer.configfile.settings.quad_gantry_level is defined
     or printer.configfile.settings.scanner           is defined                                                     %}
     _set_status STATE=status_leveling
     {% if printer.configfile.settings.scanner is defined %} CARTOGRAPHER_TOUCH CALIBRATE=1                 {% endif %}
     {% if printer.configfile.settings.z_tilt  is defined %}  Z_TILT_ADJUST   {% else %}  QUAD_GANTRY_LEVEL {% endif %}
  {% endif                                                                                                           %}
  

  # wipe, no purge {macro_wipe} purge=0 # maybe not

  {% if do_mesh == 0 %} RESPOND TYPE=command MSG='Mesh disabled'
  {% else %} 
    _set_status STATE=status_meshing
    {% if do_mesh == 1 %} BED_MESH_CALIBRATE       {% else %} BED_MESH_CALIBRATE ADAPTIVE=1 {% endif %}
  {% endif %}
  
  {% if printer.configfile.settings.scanner is defined %}
    _set_status STATE=status_calibrating_z
    M109 S{temp_probe}
    CARTOGRAPHER_TOUCH
  {% else %} G28 Z{% endif %}

  _set_status STATE=status_heating
  {% if printer["gcode_macro %s" % (macro_park)]  is defined %} {macro_park}  {% endif %} ; replace with purge bucket macro
  M109 S{temp_he}
  {% if macro_purge != 'none' %}                                {macro_purge} {% endif %}    
  _set_status STATE=status_printing


[gcode_macro _set_status]
gcode:
  {% set prt_state = params.STATE|default("none") %}
  {% set prt_msg   = params.MSG  |default("none") %}
  {% if printer.configfile.settings.respond     is defined %}
    {% if prt_msg == 'none' %}
      RESPOND MSG='{"----< %s" % (prt_state|replace("_", " "))}'
    {% else %}
      RESPOND MSG='{"----< %s" % (prt_msg)}'
    {% endif %}
  {% endif %}
  {% if printer["gcode_macro %s" % (prt_state)] is defined %}
    {prt_state} 
  {% endif %}


[gcode_macro START_PRINT]
gcode:
  PRINT_START { rawparams }

[gcode_macro PRINT_END]
gcode:
  _TOOLHEAD_PARK_PAUSE_CANCEL
  G1 E-5.2 F1800                  ; retract filament
  {% if printer['gcode_macro _beep_done'] is defined %} _beep_done      {% endif %}
  
  M400                             ; Finish Moves
  M221 S100                        ; reset flow to 100%
  M220 S100                        ; reset speed to 100%
  
  M104 S0                          ; turn off hotend
  M140 S0                          ; turn off bed
  M106 S0                          ; turn off fan
  SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1

  RESPOND PREFIX= MSG=""
  M117 
  {% if printer['gcode_macro STATUS_READY'] is defined %} STATUS_READY      {% endif %}
  SET_FAN_SPEED FAN=mcu SPEED=0

[gcode_macro END_PRINT]
gcode:
  PRINT_END { rawparams }

[gcode_macro _PURGE]
gcode: 
  {% set purge_temp_min = printer["gcode_macro _PRINTER_SETTINGS"].purge_temp_min|default(260)%}
  {% set purge_len = printer["gcode_macro _PRINTER_SETTINGS"].purge_len|default(20)%}
  {% set purge_spd = printer["gcode_macro _PRINTER_SETTINGS"].purge_spd|default(100)%}
  {% set purge_ret = printer["gcode_macro _PRINTER_SETTINGS"].purge_ret|default(12)%}
  {% set ooze_dwell = printer["gcode_macro _PRINTER_SETTINGS"].ooze_dwell|default(3)%}
  
  ## Move to bucket 
  G1 X{start_x} Y{start_y} F6000 
  G1 Z{start_z} F1500 
  
  {% if printer.extruder.temperature >= purge_temp_min %}
    M83      ; relative mode
    G1 E{purge_len} F{purge_spd}
    G1 E-{purge_ret} F{purge_spd * 5}
    G4 P{ooze_dwell * 1000}
    G92 E0   ; reset extruder
  {% else %}
    RESPOND TYPE=echo MSG='Extruder not hot enough'
  {% endif %}


[gcode_macro CLEAN_NOZZLE]
gcode: 
  {% if "xyz" not in printer.toolhead.homed_axes %}
     G28 
  {% endif %}
  
  {% set start_x = printer["gcode_macro _PRINTER_SETTINGS"].brush_start_x|default(55)%}
  {% set start_y = printer["gcode_macro _PRINTER_SETTINGS"].brush_start_y|default(10)%}
  {% set start_z = printer["gcode_macro _PRINTER_SETTINGS"].brush_start_z|default(20)%}
  {% set wipe_dist = printer["gcode_macro _PRINTER_SETTINGS"].brush_wipe_dist|default(-50)%}
  {% set wipe_qty = printer["gcode_macro _PRINTER_SETTINGS"].brush_wipe_qty|default(5)%}
  {% set wipe_spd = printer["gcode_macro _PRINTER_SETTINGS"].brush_wipe_spd|default(100)%}
  
  {% set initial_z = printer.toolhead.position.z %}
  
  G90
  ## Move to start position 
  G1 X{start_x} Y{start_y} F6000 
  G1 Z{start_z} F1500 
  ## Wipe nozzle 
  {% for wipes in range(1, (wipe_qty + 1)) %}
     G1 X{start_x + wipe_dist} F{wipe_spd * 60}
     G1 X{start_x} F{wipe_spd * 60} {% endfor %} 
  ## Raise nozzle 
  G91
  G1 Z{initial_z} F1500 


[gcode_macro PARK_REAR]
gcode:
  G90
  {% set th = printer.toolhead %}
  G0 X{th.axis_maximum.x/2} Y{th.axis_maximum.y - 5} F6000

[gcode_macro PARK_FRONT]
gcode:
  G90
  {% set th = printer.toolhead %}
  G0 X{th.axis_maximum.x/2} Y{th.axis_minimum.y + 5} F6000

[gcode_macro RELAX_BELTS]
gcode:
  G90
  {% set th = printer.toolhead %}
  {% set margin = 10 %}
  G0 Z50
  G0 X{th.axis_maximum.x - margin} Y{th.axis_maximum.y - margin} F6000 
  G0 X{th.axis_minimum.x + margin} Y{th.axis_minimum.y + margin} F6000 
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
  G0 X{th.axis_minimum.x + margin} F6000
  G0 X{th.axis_maximum.x - margin} F6000
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
  G0 Y{th.axis_minimum.y + margin} F6000
  G0 Y{th.axis_maximum.y - margin} F6000
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000

# Qoute:
# > this is where the awkwardness of JINJA (the shit in the {}) being a preprocessor shows up
# > the jinja stuff gets executed first, before any of the actual gcode does...
# so 2 macros are needed
[gcode_macro SHUTDOWN_PRINTER]
gcode:
  {% if "xyz" in printer.toolhead.homed_axes %} _TOOLHEAD_PARK_PAUSE_CANCEL {% endif %}
  TURN_OFF_HEATERS
  
  {% if printer['gcode_macro status_off'] is defined %}      status_off                                                {% endif %}
  {% if printer['gcode_macro _CASELIGHT_OFF'] is defined %}  _CASELIGHT_OFF                                            {% endif %}
  {% if printer['neopixel skirt'] is defined %}             SET_LED LED="skirt" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1 {% endif %}

  M84

#[gcode_macro _PRINTER_POWEROFF]
#gcode:
#  {action_call_remote_method("set_device_power", device="printer",state="off")}
  
##################
# Todo: interrutable HEATsoak with delay gcode
[gcode_macro HEATSOAK] 
gcode:
  status_heating
               # default is 10 minutes (600000 milliseconds)
  {% set DWELL = params.DWELL|default(600000)|int %}
  G4 P{DWELL}
  _beep_preheated


## safety firster
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling if the printer is leveled, if not level the printer
gcode:
  {% if printer.configfile.settings.z_tilt is defined and not printer.z_tilt.applied %} 
      Z_TILT_ADJUST
      G28 Z
  {% elif printer.configfile.settings.quad_gantry_level is defined and not printer.quad_gantry_level.applied %} 
      QUAD_GANTRY_LEVEL
      G28 Z
  {% endif %}
  _BED_MESH_CALIBRATE {rawparams}



# source: https://github.com/Frix-x/klippain/blob/main/macros/helpers/bed_heater_ctrl.cfg
#         https://github.com/Frix-x/klippain/blob/main/macros/helpers/hotend_heater_ctrl.cfg
# date copy : 2023-11-21
[gcode_macro M109]
rename_existing: M109.1
gcode:
  {% set S = params.S|float %}
  {% set actual_temp = printer.extruder.temperature|float %}

  M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
  {% if S != 0 %}
      {% if actual_temp <= S %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={S}
      {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={S}
      {% endif %}   
  {% endif %}


[gcode_macro M190]
rename_existing: M190.1
gcode:
  {% set S = params.S|float %}
  {% set actual_temp = printer.heater_bed.temperature|float %}

  M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
  {% if S != 0 %}
      {% if actual_temp <= S %}
          TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S}
      {% else %}
          TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={S}
      {% endif %}   
  {% endif %}


####
# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
  {% set pa = params.K|float %}
  SET_PRESSURE_ADVANCE ADVANCE={pa}


[gcode_macro M600]
gcode:
  _beep_filament_change
  PAUSE X=10 Y=10 Z_MIN=50

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = 50 * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = 50  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state


# requires module:  wget -P ~/klipper/klippy/extras/ https://raw.githubusercontent.com/dw-0/kiauh/master/resources/gcode_shell_command.py
[gcode_shell_command git_pull_config]
command: ~/PrinterBackupScript/pullconfig.sh
timeout: 30.0
verbose: True

[gcode_macro CONFIG_PULL]
description: Pull config from GitHub
gcode:
  RUN_SHELL_COMMAND CMD=git_pull_config

[gcode_shell_command git_pull_commit]
command: ~/PrinterBackupScript/autocommit.sh
timeout: 30.0
verbose: True

[gcode_macro CONFIG_BACKUP]
description: Backs up config to GitHub
gcode:
  RUN_SHELL_COMMAND CMD=git_pull_commit

[gcode_shell_command clean_filesystem]
command: ~/printer_data/config/printerconfig/tools/clean_tempfiles.sh
timeout: 30.0
verbose: True

[gcode_macro _clean_filesystem]
description: Removes old files
gcode:
  RUN_SHELL_COMMAND CMD=clean_filesystem

[gcode_shell_command query_updated]
command: wget -O/dev/null --post-data '' http://127.0.0.0/machine/update/refresh
timeout: 30.0
verbose: True

[gcode_macro _query_updated]
description: Request update check on all repos configured in moonraker
gcode:
  RUN_SHELL_COMMAND CMD=query_updated


[gcode_macro SEARCH_VARS]
gcode:
  {% set search = params.S|lower %}
  {% set ns = namespace() %}
  {% for item in printer  %}
      {% if ' ' in item %}
          {% set ns.path = ['printer', "['%s']" % (item), ''] %}
      {% else %}
          {% set ns.path = ['printer.', item, ''] %}   
      {% endif %} 

      {% if search in ns.path|lower %}
          { action_respond_info(ns.path|join) }
      {% endif %} 

      {% if printer[item].items() %}
          {% for childkey, child in printer[item].items() recursive %}
              {% set ns.path = ns.path[:loop.depth|int + 1] %}

              {% if ' ' in childkey %}
                  {% set null = ns.path.append("['%s']" % (childkey)) %}
              {% else %}
                  {% set null = ns.path.append(".%s" % (childkey)) %}
              {% endif %} 

              {% if child is mapping  %}
                  { loop(child.items()) }
              {% else %}
                  {% if search in ns.path|lower %}
                      { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                  {% endif %} 
              {% endif %} 
              
          {% endfor %}
      {% endif %} 
  {% endfor %}

